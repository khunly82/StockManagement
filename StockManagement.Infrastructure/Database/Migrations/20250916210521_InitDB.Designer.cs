// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StockManagement.Infrastructure.Database;

#nullable disable

namespace StockManagement.Infrastructure.Database.Migrations
{
    [DbContext(typeof(StockContext))]
    [Migration("20250916210521_InitDB")]
    partial class InitDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StockManagement.Domain.Entities.Customer", b =>
                {
                    b.Property<string>("Reference")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)");

                    b.HasKey("Reference");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Reference = "LYKH0001",
                            Deleted = false,
                            Email = "lykhun@gmail.com",
                            FirstName = "Khun",
                            LastName = "Ly"
                        },
                        new
                        {
                            Reference = "LYPI0001",
                            Deleted = false,
                            Email = "piv.ly@bstorm.be",
                            FirstName = "Piv",
                            LastName = "Ly"
                        },
                        new
                        {
                            Reference = "PEMI0001",
                            Deleted = false,
                            Email = "michael.person@cognitic.be",
                            FirstName = "Mike",
                            LastName = "Person"
                        },
                        new
                        {
                            Reference = "MOTH0001",
                            Deleted = false,
                            Email = "tierry.morre@cognitic.be",
                            FirstName = "Thierry",
                            LastName = "Morre"
                        },
                        new
                        {
                            Reference = "COJU0001",
                            Deleted = false,
                            Email = "julien.coppin@bstorm.be",
                            FirstName = "Julien",
                            LastName = "Coppin"
                        },
                        new
                        {
                            Reference = "COJU0002",
                            Deleted = false,
                            Email = "julie@courtois.be",
                            FirstName = "Julie",
                            LastName = "Courtois"
                        },
                        new
                        {
                            Reference = "STAU0001",
                            Deleted = false,
                            Email = "aurelien.strimelle@bstorm.be",
                            FirstName = "Aurélien",
                            LastName = "Strimelle"
                        },
                        new
                        {
                            Reference = "OVFL0001",
                            Deleted = false,
                            Email = "flavian.ovyn@bstorm.be",
                            FirstName = "Flavian",
                            LastName = "Ovyn"
                        },
                        new
                        {
                            Reference = "LAST0001",
                            Deleted = false,
                            Email = "steve.laurent@bstorm.be",
                            FirstName = "Steve",
                            LastName = "Laurent"
                        },
                        new
                        {
                            Reference = "BALO0001",
                            Deleted = false,
                            Email = "loic.baudoux@bstorm.be",
                            FirstName = "Loïc",
                            LastName = "Baudoux"
                        },
                        new
                        {
                            Reference = "PEMI0002",
                            Deleted = false,
                            Email = "michel@pedro.be",
                            FirstName = "Michel",
                            LastName = "Pedro"
                        },
                        new
                        {
                            Reference = "COJU0003",
                            Deleted = false,
                            Email = "jules@constant.be",
                            FirstName = "Jules",
                            LastName = "Constant"
                        });
                });

            modelBuilder.Entity("StockManagement.Domain.Entities.Order", b =>
                {
                    b.Property<string>("Reference")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<string>("CustomerRef")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Reference");

                    b.HasIndex("CustomerRef");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("StockManagement.Domain.Entities.OrderLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("OrderRef")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<string>("ProductRef")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("MONEY");

                    b.HasKey("Id");

                    b.HasIndex("OrderRef");

                    b.HasIndex("ProductRef");

                    b.ToTable("OrderLines");
                });

            modelBuilder.Entity("StockManagement.Domain.Entities.Product", b =>
                {
                    b.Property<string>("Reference")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("MONEY");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Reference");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Reference = "COCA0001",
                            Deleted = false,
                            Description = "CAN. 24X33cl",
                            Name = "Coca Cola 33cl",
                            Price = 16.8m,
                            Stock = 1000
                        },
                        new
                        {
                            Reference = "COCA0002",
                            Deleted = false,
                            Description = "CAN. 24X50cl",
                            Name = "Coca Cola 50cl",
                            Price = 19.92m,
                            Stock = 1000
                        },
                        new
                        {
                            Reference = "COCA0003",
                            Deleted = false,
                            Description = "BOUT. 6X1l",
                            Name = "Coca Cola 1l",
                            Price = 10.92m,
                            Stock = 1000
                        },
                        new
                        {
                            Reference = "FANT0001",
                            Deleted = false,
                            Description = "CAN. 24X33cl",
                            Name = "Fanta Orange 33cl",
                            Price = 16.8m,
                            Stock = 1000
                        },
                        new
                        {
                            Reference = "FANT0002",
                            Deleted = false,
                            Description = "CAN. 24X33cl",
                            Name = "Fanta Citron 33cl",
                            Price = 16.8m,
                            Stock = 1000
                        },
                        new
                        {
                            Reference = "FANT0003",
                            Deleted = false,
                            Description = "CAN. 24X50cl",
                            Name = "Fanta Orange 50cl",
                            Price = 16.8m,
                            Stock = 1000
                        },
                        new
                        {
                            Reference = "FANT0004",
                            Deleted = false,
                            Description = "CAN. 24X50cl",
                            Name = "Fanta Citron 50cl",
                            Price = 19.92m,
                            Stock = 1000
                        },
                        new
                        {
                            Reference = "JUPI0001",
                            Deleted = false,
                            Description = "CAN. 24X33cl",
                            Name = "Jupiler 33cl",
                            Price = 29.04m,
                            Stock = 1000
                        },
                        new
                        {
                            Reference = "JUPI0002",
                            Deleted = false,
                            Description = "CAN. 24X50cl",
                            Name = "Jupiler 50cl",
                            Price = 35.52m,
                            Stock = 1000
                        },
                        new
                        {
                            Reference = "CARL0001",
                            Deleted = false,
                            Description = "CAN. 24X33cl",
                            Name = "Carlsberg 33cl",
                            Price = 32.4m,
                            Stock = 1000
                        },
                        new
                        {
                            Reference = "CHIM0001",
                            Deleted = false,
                            Description = "BOUT. 24X33cl",
                            Name = "Chimay Bleue 33cl",
                            Price = 45.6m,
                            Stock = 1000
                        },
                        new
                        {
                            Reference = "CHIM0002",
                            Deleted = false,
                            Description = "BOUT. 24X33cl",
                            Name = "Chimay Rouge 33cl",
                            Price = 45.6m,
                            Stock = 1000
                        },
                        new
                        {
                            Reference = "CHIM0003",
                            Deleted = false,
                            Description = "BOUT. 24X33cl",
                            Name = "Chimay Blanche 33cl",
                            Price = 30.24m,
                            Stock = 1000
                        },
                        new
                        {
                            Reference = "NALU0001",
                            Deleted = false,
                            Description = "CAN. 24X25cl",
                            Name = "Nalu Vert 25cl",
                            Price = 16.8m,
                            Stock = 1000
                        },
                        new
                        {
                            Reference = "EVIA0001",
                            Deleted = false,
                            Description = "BOUT. 8X1l",
                            Name = "Evian 1l",
                            Price = 8.96m,
                            Stock = 1000
                        },
                        new
                        {
                            Reference = "EVIA0002",
                            Deleted = false,
                            Description = "BOUT. 24X50cl",
                            Name = "Evian 50cl",
                            Price = 5.6m,
                            Stock = 1000
                        },
                        new
                        {
                            Reference = "VITT0001",
                            Deleted = false,
                            Description = "BOUT. 8X1l",
                            Name = "Vittel 1l",
                            Price = 8.72m,
                            Stock = 1000
                        },
                        new
                        {
                            Reference = "VITT0002",
                            Deleted = false,
                            Description = "BOUT. 24X50cl",
                            Name = "Vittel 50cl",
                            Price = 5.44m,
                            Stock = 1000
                        },
                        new
                        {
                            Reference = "OASI0001",
                            Deleted = false,
                            Description = "BOUT. 6X2l",
                            Name = "Oasis Orange 2l",
                            Price = 13.44m,
                            Stock = 1000
                        },
                        new
                        {
                            Reference = "OASI0002",
                            Deleted = false,
                            Description = "BOUT. 6X2l",
                            Name = "Oasis Tropical 2l",
                            Price = 13.44m,
                            Stock = 1000
                        });
                });

            modelBuilder.Entity("StockManagement.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<byte[]>("EncodedPassword")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@yopmail.com",
                            EncodedPassword = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 240, 90, 84, 232, 219, 216, 81, 35, 95, 61, 42, 78, 64, 163, 128, 22, 235, 163, 191, 31, 240, 51, 87, 22, 24, 214, 186, 177, 237, 222, 74 },
                            Role = 0
                        },
                        new
                        {
                            Id = 2,
                            Email = "seller@yopmail.com",
                            EncodedPassword = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 13, 182, 13, 16, 8, 49, 246, 54, 48, 166, 192, 136, 39, 231, 87, 81, 36, 143, 125, 239, 148, 34, 27, 162, 49, 24, 144, 171, 252, 73, 211, 188 },
                            Role = 1
                        },
                        new
                        {
                            Id = 3,
                            Email = "restocker@yopmail.com",
                            EncodedPassword = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 250, 245, 79, 68, 199, 90, 97, 103, 241, 243, 132, 98, 202, 190, 140, 216, 34, 238, 181, 14, 85, 55, 92, 83, 128, 64, 107, 214, 234, 169, 36, 223 },
                            Role = 1
                        });
                });

            modelBuilder.Entity("StockManagement.Domain.Entities.Order", b =>
                {
                    b.HasOne("StockManagement.Domain.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("StockManagement.Domain.Entities.OrderLine", b =>
                {
                    b.HasOne("StockManagement.Domain.Entities.Order", "Order")
                        .WithMany("OrderLines")
                        .HasForeignKey("OrderRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StockManagement.Domain.Entities.Product", "Product")
                        .WithMany("OrderLines")
                        .HasForeignKey("ProductRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("StockManagement.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("StockManagement.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderLines");
                });

            modelBuilder.Entity("StockManagement.Domain.Entities.Product", b =>
                {
                    b.Navigation("OrderLines");
                });
#pragma warning restore 612, 618
        }
    }
}
